// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	clue "github.com/super-saga/go-x/clue"

	mock "github.com/stretchr/testify/mock"
)

// Meta is an autogenerated mock type for the Meta type
type Meta struct {
	mock.Mock
}

// GetCode provides a mock function with given fields:
func (_m *Meta) GetCode() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCode")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInfo provides a mock function with given fields:
func (_m *Meta) GetInfo() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetMessage provides a mock function with given fields:
func (_m *Meta) GetMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Marshall provides a mock function with given fields: _a0
func (_m *Meta) Marshall(_a0 *clue.Clue) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Marshall")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*clue.Clue) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*clue.Clue) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*clue.Clue) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCode provides a mock function with given fields: _a0
func (_m *Meta) SetCode(_a0 string) {
	_m.Called(_a0)
}

// SetMessage provides a mock function with given fields: _a0
func (_m *Meta) SetMessage(_a0 string) {
	_m.Called(_a0)
}

// Templating provides a mock function with given fields: ctx, _a1
func (_m *Meta) Templating(ctx context.Context, _a1 *clue.Clue) *clue.Clue {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Templating")
	}

	var r0 *clue.Clue
	if rf, ok := ret.Get(0).(func(context.Context, *clue.Clue) *clue.Clue); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clue.Clue)
		}
	}

	return r0
}

// NewMeta creates a new instance of Meta. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMeta(t interface {
	mock.TestingT
	Cleanup(func())
}) *Meta {
	mock := &Meta{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
