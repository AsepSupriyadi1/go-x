// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	clue "github.com/super-saga/go-x/clue"

	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

// Error provides a mock function with given fields:
func (_m *Builder) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MarshalJSON provides a mock function with given fields:
func (_m *Builder) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: c
func (_m *Builder) Send(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapBI provides a mock function with given fields:
func (_m *Builder) SnapBI() clue.Builder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SnapBI")
	}

	var r0 clue.Builder
	if rf, ok := ret.Get(0).(func() clue.Builder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clue.Builder)
		}
	}

	return r0
}

// Std provides a mock function with given fields:
func (_m *Builder) Std() clue.Builder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Std")
	}

	var r0 clue.Builder
	if rf, ok := ret.Get(0).(func() clue.Builder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clue.Builder)
		}
	}

	return r0
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
